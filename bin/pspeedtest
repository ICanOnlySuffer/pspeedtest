#!/usr/bin/env ruby

require 'pspeedtest/help'
require 'pspeedtest/info'
require 'pspeedtest'
require 'optparse'
include PSpeedTest

CLI = {
	to_download: [],
	to_upload: [],
	format: '',
	sleep: 0,
	runs: 1.times
}

$stdout.sync = true

OptionParser.new USAGE, 20, '  ' do |opts|
	opts.on '-dARRAY', '--download=ARRAY', LANG[:download] do |array|
		CLI[:to_download] = array.split.map &:to_i
	end
	opts.on '-uARRAY', '--upload=ARRAY', LANG[:upload] do |array|
		CLI[:to_upload] = array.split.map &:to_i
	end
	opts.on '-fSTRING', '--format=STRING', LANG[:format] do |string|
		CLI[:format] = string.gsub '\n', ?\n
	end
	opts.on '-sTIME', '--sleep=TIME', LANG[:sleep] do |time|
		CLI[:sleep] = time.to_i
	end
	opts.on '-r[RUNS]', '--runs[=RUNS]', LANG[:runs] do |runs|
		CLI[:runs] = runs ? runs.to_i.times : loop
	end
	opts.on '-v', '--version', LANG[:version] do
		puts <<~TXT
			pspeedtest v#{VERSION} - #{AUTHORS.values.join ', '}
			> #{GITHOME}
			#{LANG[:licence] % LICENSE}
		TXT
		exit
	end
	opts.on '-h[OPTION]', '--help[=OPTION]', LANG[:help] do |option|
		if option
			example, allowed = HELP[option.to_sym]
			puts "#{LANG[:allowed]}:\n  #{allowed}" if allowed
			puts "#{LANG[:example]}:\n  --#{option}=#{example}"
		else
			puts opts, EXAMPLE
		end
		exit
	end
end.parse!

DOWNLOAD_SUM = Speed.new 0, 0
UPLOAD_SUM = Speed.new 0, 0

CLI[:runs].each do
	sleep CLI[:sleep]
	
	SERVER.update!
	time = Time.now
	download = SERVER.download CLI[:to_download]
	upload = SERVER.upload CLI[:to_upload]
	
	DOWNLOAD_SUM.bits += download.bits
	DOWNLOAD_SUM.time += download.time
	UPLOAD_SUM.bits += upload.bits
	UPLOAD_SUM.time += upload.time
	
	print (time.strftime CLI[:format]) % {
		'host': SERVER.host,
		'sponsor': SERVER.sponsor,
		'latency': SERVER.latency,
		'latitude': SERVER.lat,
		'longitude': SERVER.lon,
		'download.sum': DOWNLOAD_SUM,
		'download.bits.sum': DOWNLOAD_SUM.bits,
		'download.time.sum': DOWNLOAD_SUM.time,
		'upload.sum': UPLOAD_SUM,
		'upload.bits.sum': UPLOAD_SUM.bits,
		'upload.time.sum': UPLOAD_SUM.time,
		'download': download,
		'download.bits': download.bits,
		'download.time': download.time,
		'upload': upload,
		'upload.bits': upload.bits,
		'upload.time': upload.time
	}
rescue => error
	$stderr.puts "\e[31m#{error.message}\e[0m"
rescue Interrupt
	$stderr.puts
	exit
end

